
Copyright (c) 2006-2007, Joseph B. Kowalski
See LICENSE for licensing information


To setup the 'DNSEL' component of the 'TorNetworkStatus' Application, 
follow these instructions:


1) First, setup the main 'TorNetworkStatus' application by following the
instructions in the 'README' file. Come back to this file once you know
that the main application is working correctly.

2) Make sure you have the Java runtime installed and correctly configured.
Also, make sure you have the following package installed correctly, and that
it is registered in your classpath:

	MySQL-Connector-Java

3) Open up the 'DNSELServer.properties' file in a text editor. Configure the
variables in the file to be correct for your environment:

--config_ListenIP: The IP interface to listen on. This either needs to be a
public IP, or a private IP that has some kind of forwarding mechanism to get
requests made to some public IP to it. How to do this is left as an exercise
for the reader (HINT: NAT).

--config_ListenPort: The port the DNSEL server will listen on. 53 is the
default for DNS. Note, however, that in order for this program to listen on
port 53 directly, it must be run as root, and this is never recommended.
Instead, you should have this program run on a higher port as a less
privileged user, and use a more secure process to listen on port 53 and
forward the requests to the higher port. How to do this is left as an exercise
for the reader (HINT: IPTables). 

--config_TimeToLive: The TTL value to be sent back to clients along with their
successful 'A' record return.

--config_MatchReturnAddress: This controls what IP address will be returned by
the DNSEL server when a client sends an 'A' record request that is a
successful match. '127.0.0.2' seems to be the customary return value for
positive hits on DNSEL servers.

--config_DNSEL_Domain: Enter the full DNS name, in lower-case, that your DNSEL
server will be authoritative for. So, if your server is going to handle
'ip-port.torhosts.example.com', enter that value here. Of course, you'll also
need to create the appropriate DNS NS record in an upstream DNS server to show
that your DNSEL server is authoritative for this domain name, and the
appropriate DNS A record in an upstream DNS server that points to the public
IP address that you will have the DNSEL server listening on so that queries
for this domain name actually make it to your server.

--config_DNSEL_IP: The IP address to return when the DNSEL server gets an 'A'
request for its exact authoritative root domain name, which is what you
entered in the 'config_DNSEL_Domain' variable, above.

-- config_SQL_Server: IP address or hostname of your MySQL server.

-- config_SQL_Port: The port your MySQL server is listening on.

-- config_SQL_User: Username you setup for the database.

-- config_SQL_Pass: Password you setup for the database.

-- config_SQL_Catalog: Name of the database. Default is "TorNetworkStatus",
but this may be anything you want. 

Note: If you want to advertise your DNSEL server on the TorNetworkStatus site,
make sure you also set the "$DNSEL_Domain" variable in the "web/config.php"
file. You should set this variable to the same value that you used for the
"config_DNSEL_Domain" variable, above. If you don't wish to advertise your
DNSEL server on the TorNetworkStatus site, you can leave the "$DNSEL_Domain"
variable in the "web/config.php" file set to 'null'.

4) Start the 'DNSELServer' Java program. As mentioned above, you really
should run this program as a less privileged user listening to a port above
1024. Starting the program with a utility like 'Sudo' can accomplish this.
You'll also probably want to run this program in the background once you know
it's working correctly.


That's it! If you've setup everything correctly, you should now be able to
make requests of the DNSEL server.


To use the DNSEL server:

The DNSEL server responds to one specially formatted 'A' record query. This
query provides an answer for the question "Is this IP an active Tor server,
and, if so, would its exit policy allow an exit to this destination IP and
port?" 

The format of this query is as follows:

{IP1}.{port}.{IP2}.ip-port.torhosts.example.com

So, assuming your DNSEL domain name is 'ip-port.torhosts.example.com', and
you want to check if IP '1.2.3.4' is an active Tor server capable of exiting
to '55.66.77.88', on port 60000, you would send the following 'A' record
query:

4.3.2.1.60000.88.77.66.55.ip-port.torhosts.example.com

Note that the octets of both IP addresses are reversed, kindof like we were
doing a PTR query, but this is, in fact, an 'A' query.

If '1.2.3.4' is an active Tor server, AND if that Tor server can exit to
'55.66.77.88', port 60000, the DNSEL server will respond with a '127.0.0.2'
'A' record. If '1.2.3.4' is NOT an active Tor server, or if '1.2.3.4' IS an
active Tor server, but is using an exit policy that would prevent exit to
'55.66.77.88', port 60000, the DNSEL server will respond with a 'Non-Existent
Domain (NXDOMAIN)' error.


The DNSEL server will always respond with a SERVFAIL error if a client tries
to lookup anything outside of your DNSEL domain name. So, if your DNSEL domain
name is 'ip-port.torhosts.example.com', and a client sends an 'A' request for
'www.google.com', the DNSEL server will return a SERVFAIL error.

The DNSEL server will always respond with a NXDOMAIN (Non-Existent Domain) 
error if a client sends anything other than an 'A' record query, such as an
'MX' or 'SOA' query, and that query is within the zone the server is
authoritative for.

The DNSEL server will set the 'Authoritative' flag to true for responses that
are within it's root domain name, and will set it to false for responses that
are outside of it.
